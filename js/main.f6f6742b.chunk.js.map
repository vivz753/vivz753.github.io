{"version":3,"sources":["Cube.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["style","height","Cube","sceneSetup","width","mount","clientWidth","clientHeight","scene","THREE","camera","position","z","controls","OrbitControls","renderer","setSize","appendChild","domElement","addCustomSceneObjects","geometry","material","color","emissive","side","flatShading","cube","add","lights","set","startAnimationLoop","rotation","x","y","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","ref","Component","App","className","src","logo","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8TAIMA,EAAQ,CACVC,OAAQ,KAmGGC,E,2MAhFXC,WAAa,WAIT,IAAMC,EAAQ,EAAKC,MAAMC,YAGnBL,EAAS,EAAKI,MAAME,aAE1B,EAAKC,MAAQ,IAAIC,IACjB,EAAKC,OAAS,IAAID,IACd,GACAL,EAAQH,EACR,GACA,KAIJ,EAAKS,OAAOC,SAASC,EAAI,EAEzB,EAAKC,SAAW,IAAIC,IAAc,EAAKJ,OAAQ,EAAKL,OAEpD,EAAKU,SAAW,IAAIN,IACpB,EAAKM,SAASC,QAAQZ,EAAOH,GAC7B,EAAKI,MAAMY,YAAY,EAAKF,SAASG,a,EAGzCC,sBAAwB,WACpB,IAAMC,EAAW,IAAIX,IAAkB,EAAG,EAAG,GACvCY,EAAW,IAAIZ,IAAyB,CAC1Ca,MAAO,QACPC,SAAU,OACVC,KAAMf,IACNgB,aAAa,IAEjB,EAAKC,KAAO,IAAIjB,IAAWW,EAAUC,GACrC,EAAKb,MAAMmB,IAAI,EAAKD,MAEpB,IAAME,EAAS,GACfA,EAAO,GAAK,IAAInB,IAAiB,SAAU,EAAG,GAC9CmB,EAAO,GAAK,IAAInB,IAAiB,SAAU,EAAG,GAC9CmB,EAAO,GAAK,IAAInB,IAAiB,SAAU,EAAG,GAE9CmB,EAAO,GAAGjB,SAASkB,IAAI,EAAG,IAAK,GAC/BD,EAAO,GAAGjB,SAASkB,IAAI,IAAK,IAAK,KACjCD,EAAO,GAAGjB,SAASkB,KAAK,KAAM,KAAM,KAEpC,EAAKrB,MAAMmB,IAAIC,EAAO,IACtB,EAAKpB,MAAMmB,IAAIC,EAAO,IACtB,EAAKpB,MAAMmB,IAAIC,EAAO,K,EAG1BE,mBAAqB,WAEjB,EAAKJ,KAAKK,SAASC,GAAK,IACxB,EAAKN,KAAKK,SAASE,GAAK,IAExB,EAAKlB,SAASmB,OAAO,EAAK1B,MAAO,EAAKE,QACtC,EAAKyB,UAAYC,OAAOC,sBAAsB,EAAKP,qB,EAGvDQ,mBAAqB,WACjB,IAAMlC,EAAQ,EAAKC,MAAMC,YACnBL,EAAS,EAAKI,MAAME,aAE1B,EAAKQ,SAASC,QAAQZ,EAAOH,GAC7B,EAAKS,OAAO6B,OAASnC,EAAQH,EAI7B,EAAKS,OAAO8B,0B,mFA/EZC,KAAKtC,aACLsC,KAAKtB,wBACLsB,KAAKX,qBAGLM,OAAOM,iBAAiB,SAAUD,KAAKH,sB,+BA6ElC,IAAD,OACJ,OACI,yBAAKtC,MAAOA,EAAO2C,IAAK,SAAAA,GAAG,OAAK,EAAKtC,MAAQsC,S,GA1FtCC,aCsBJC,E,iLAvBX,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,MACE,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,8CAGA,uBACEH,UAAU,WACVI,KAAK,6BACLC,OAAO,SACPC,IAAI,uBAJN,4B,GAXQR,aCOES,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f6f6742b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as THREE from \"three\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst style = {\r\n    height: 500 // we can control scene size by setting container dimensions\r\n\r\n  };\r\n\r\nclass Cube extends Component { \r\n\r\n\r\n      \r\n    componentDidMount() {\r\n\r\n        this.sceneSetup();\r\n        this.addCustomSceneObjects();\r\n        this.startAnimationLoop();\r\n        \r\n        //check for window resizing\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n\r\n      }\r\n\r\n    sceneSetup = () => {\r\n        // renderer.setSize( window.innerWidth, window.innerHeight );\r\n        // var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n\r\n        const width = this.mount.clientWidth;\r\n        // const width = window.innerWidth;\r\n        // const height = window.innerHeight/2;\r\n        const height = this.mount.clientHeight;\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            75, // fov = field of view\r\n            width / height, //aspect ratio\r\n            0.1, //near plane\r\n            1000 //far plane\r\n        );\r\n\r\n        // distance from cube located at z = 0 is 5 units (whatever that may be)\r\n        this.camera.position.z = 5;\r\n\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.mount.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    addCustomSceneObjects = () => {\r\n        const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n        const material = new THREE.MeshPhongMaterial( {\r\n            color: 0x156289,\r\n            emissive: 0x072534,\r\n            side: THREE.DoubleSide,\r\n            flatShading: true\r\n        });\r\n        this.cube = new THREE.Mesh(geometry, material);\r\n        this.scene.add(this.cube);\r\n\r\n        const lights = [];\r\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\r\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\r\n\r\n        lights[0].position.set(0, 200, 0);\r\n        lights[1].position.set(100, 200, 100);\r\n        lights[2].position.set(-100, -200, -100);\r\n\r\n        this.scene.add(lights[0]);\r\n        this.scene.add(lights[1]);\r\n        this.scene.add(lights[2]);\r\n    }\r\n\r\n    startAnimationLoop = () => {\r\n        // let the cubes rotate\r\n        this.cube.rotation.x += 0.01;\r\n        this.cube.rotation.y += 0.01;\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\r\n    }\r\n\r\n    handleWindowResize = () => {\r\n        const width = this.mount.clientWidth;\r\n        const height = this.mount.clientHeight;\r\n    \r\n        this.renderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n    \r\n        // Note that after making changes to most of camera properties you have to call\r\n        // .updateProjectionMatrix for the changes to take effect.\r\n        this.camera.updateProjectionMatrix();\r\n      };\r\n\r\n    render(){\r\n        return(\r\n            <div style={style} ref={ref => (this.mount = ref)}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cube;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cube from './Cube';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Cube></Cube>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            herp derp. lmao\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/vivz753\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            github.com/vivz753\n          </a>\n        </header>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}